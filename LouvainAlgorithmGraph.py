import community
import networkx as nx
import matplotlib.pyplot as plt

# load the edge list and create a directed Graph
fh = open("hamster.edgelist", 'rb')
G = nx.read_edgelist(fh)
fh.close()

# This method implements Louvain method using a greedy algorithm
# This is the partition of highest modularity, 
# i.e. the highest partition of the dendrogram generated by the Louvain algorithm
# more details: http://perso.crans.org/aynaud/communities/api.html#community.best_partition
partition = community.best_partition(G)

values = [partition.get(node) for node in G.nodes()]

print(nx.info(G))

density = nx.density(G)
print("Network density:", density)

print("")

#drawing
size = float(len(set(partition.values())))

pos = nx.spring_layout(G, k = 0.07)

count = 0.
for com in set(partition.values()) :
    count = count + 1.
    list_nodes = [nodes for nodes in partition.keys()
                                if partition[nodes] == com]
    nx.draw_networkx_nodes(G, pos, list_nodes, node_size = 20,
                                node_color = str(0.75*(count / size)))


#plt.axis("off")
nx.draw_networkx_edges(G, pos, alpha=0.8)

nx.write_gexf(G, 'com_graph.gexf')

plt.show()

# partition is the returned results of best_partition
# it is a dict in Python
#print(partition)




