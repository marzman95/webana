import community
import networkx as nx
import matplotlib.pyplot as plt

from random import randint

# load the edge list and create a directed Graph
fh = open("hamster.edgelist", 'rb')
G = nx.read_edgelist(fh)
fh.close()

# This method implements Louvain method using a greedy algorithm
# This is the partition of highest modularity, 
# i.e. the highest partition of the dendrogram generated by the Louvain algorithm
# more details: http://perso.crans.org/aynaud/communities/api.html#community.best_partition
partition = community.best_partition(G)

values = [partition.get(node) for node in G.nodes()]

print(nx.info(G))

density = nx.density(G)
print("Network density:", density)

mod = community.modularity(partition,G)
print("Modularity:", mod)

print("")

#drawing
pos = nx.spring_layout(G, k = 0.07)

nx.draw_networkx_nodes(G, pos, node_size=15, cmap=plt.cm.RdYlBu, node_color=list(partition.values()))
nx.draw_networkx_edges(G, pos, alpha=0.8)

plt.show()

# partition is the returned results of best_partition
# it is a dict in Python
#print(partition)




